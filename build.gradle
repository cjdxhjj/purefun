plugins {
  id 'java-library'
  id 'jacoco'
  id 'maven-publish'
  id 'signing'
  id "org.sonarqube" version "${sonarVersion}"
  id "com.diffplug.eclipse.apt" version "${oomphVersion}"
  id 'io.github.gradle-nexus.publish-plugin' version "${nexusVersion}"
}

apply plugin: 'org.sonarqube'

allprojects {
  apply plugin: 'java-library'
  apply plugin: 'jacoco'
  apply plugin: 'maven-publish'
  apply plugin: 'signing'
  apply plugin: 'com.diffplug.eclipse.apt'

  group = 'com.github.tonivade'

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(17)
    }
  }

  ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
  }

  jacoco {
    toolVersion = jacocoVersion
  }

  compileJava {
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:rawtypes'
    options.release = 17
  }

  compileTestJava {
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:rawtypes'
    options.release = 17
  }

  jacocoTestReport {
    reports {
      xml.required = true
      html.required = true
      xml.outputLocation = file("${buildDir}/reports/jacoco/report.xml")
    }
  }
}

subprojects {

  java {
    withJavadocJar()
    withSourcesJar()
  }

  test {
    useJUnitPlatform()

    jacoco {
      destinationFile = file("${buildDir}/jacoco/test.exec")
    }

    reports.html.required = false
  }

  publishing {
    publications {
      mavenJava(MavenPublication) {
        
        from components.java

        pom {
          name = 'Pure Fun'
          description = 'Functional Programming Library for Java'
          url = 'https://github.com/tonivade/purefun'
          inceptionYear = '2018'

          scm {
            url = 'https://github.com/tonivade/purefun'
            connection = 'scm:https://github.com/tonivade/purefun.git'
            developerConnection = 'scm:git://github.com/tonivade/purefun.git'
          }

          licenses {
            license {
              name = 'The MIT License (MIT)'
              url = 'https://github.com/tonivade/purefun/blob/master/LICENSE'
              distribution = 'repo'
            }
          }

          developers {
            developer {
              id = 'tonivade'
              name = 'Antonio MuÃ±oz'
              email = 'antoniogmc@gmail.com'
            }
          }
        }
      }
    }
  }

  signing {
    sign publishing.publications.mavenJava
  }
  
  tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
  }

  dependencies {
    testImplementation libs.junitJupiter
    testRuntimeOnly libs.junitRunner
    testImplementation libs.equalsVerifier
    testImplementation libs.mockitoCore
    testImplementation libs.mockitoJunit
  }
}

nexusPublishing {
  repositories {
    sonatype {
      
      stagingProfileId = '19a96b937cdb5'
      
      username = project.findProperty('nexusUsername')  
      password = project.findProperty('nexusPassword')
    }
  }
  
  clientTimeout = Duration.ofSeconds(300)
  connectTimeout = Duration.ofSeconds(60)

  transitionCheckOptions {
    maxRetries.set(40)
    delayBetween.set(Duration.ofMillis(3000))
  }
}

def publishedProjects = subprojects.findAll()

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports', dependsOn: jacocoTestReport) {
  description = 'Generates an aggregate report from all subprojects'

  additionalSourceDirs.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
  classDirectories.from = files(publishedProjects.sourceSets.main.output)
  executionData.from = files(publishedProjects.jacocoTestReport.executionData).findAll { it.exists() }

  reports {
    html.required = true
    xml.required = true
    xml.outputLocation = file("${buildDir}/reports/jacoco/report.xml")
  }
}

task fullTestReport(type: TestReport, group: 'Html Report with all the tests', dependsOn: check) {
  destinationDir = file("$buildDir/reports/allTests")

  reportOn subprojects*.test
}
